__d((function(g,r,i,a,m,e,d){Object.defineProperty(e,"__esModule",{value:!0}),e.acceptSessionProposal=t,e.disconnectExistingSessions=o,e.onSessionProposal=async function(c){const{wallet:p,walletConnectClient:l,event:w,chains:C,onConnect:u}=c,f=p.getAccount();if(!f)throw new Error("No account connected to provided wallet");const v=w.verifyContext?.verified?.origin;v&&await o({origin:v,walletConnectClient:l});const h=await t({account:f,chains:C,sessionProposal:w,walletConnectClient:l});await(0,s.saveSession)(h),p.subscribe("disconnect",(()=>{(0,n.disconnectWalletConnectSession)({session:h,walletConnectClient:l})})),u?.(h)};var n=r(d[0]),s=r(d[1]);async function o({walletConnectClient:o,origin:t}){const c=await(0,s.getSessions)();for(const s of c)s.origin===t&&await(0,n.disconnectWalletConnectSession)({session:s,walletConnectClient:o})}async function t({account:n,walletConnectClient:s,sessionProposal:o,chains:t}){if(!o.params.requiredNamespaces?.eip155&&!o.params.optionalNamespaces?.eip155)throw new Error("No EIP155 namespace found in Wallet Connect session proposal");const c={chains:[...Array.from(new Set([...o.params.requiredNamespaces?.eip155?.chains?.map((s=>`${s}:${n.address}`))??[],...o.params.optionalNamespaces?.eip155?.chains?.map((s=>`${s}:${n.address}`))??[],...t?.map((s=>`eip155:${s.id}:${n.address}`))??[]]))],events:[...o.params.requiredNamespaces?.eip155?.events??[],...o.params.optionalNamespaces?.eip155?.events??[]],methods:[...o.params.requiredNamespaces?.eip155?.methods??[],...o.params.optionalNamespaces?.eip155?.methods??[]]},p=await s.approve({id:o.id,namespaces:{eip155:{accounts:c.chains,events:c.events,methods:c.methods}}}),l=await p.acknowledged();return{origin:o.verifyContext?.verified?.origin||"Unknown origin",topic:l.topic}}}),5644,[5280,5643]);