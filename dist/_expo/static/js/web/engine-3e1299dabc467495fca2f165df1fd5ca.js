__d((function(g,r,i,a,m,e,d){Object.defineProperty(e,"__esModule",{value:!0}),e.prepareEngineTransaction=c,e.relayEngineTransaction=async function(t){const{message:s,messageType:o,signature:u}=await c(t),l=await fetch(t.gasless.relayerUrl,{body:(0,n.stringify)({forwarderAddress:t.gasless.relayerForwarderAddress,request:s,signature:u,type:o}),headers:{"Content-Type":"application/json"},method:"POST"});if(!l.ok)throw new Error(`Failed to send transaction: ${await l.text()}`);const y=await l.json();if(!y.result)throw new Error(`Relay transaction failed: ${y.message}`);const p=y.result.queueId,h=Date.now()+6e4;for(;Date.now()<h;){const n=await w({options:t,queueId:p});if(n)return{chain:t.transaction.chain,client:t.transaction.client,transactionHash:n.transactionHash};await new Promise((t=>setTimeout(t,1e3)))}throw new Error("Failed to find relayed transaction after 60000ms")};var t=r(d[0]),n=r(d[1]),s=r(d[2]),o=r(d[3]);async function c({account:n,serializableTransaction:o,transaction:c,gasless:w}){const y=(0,t.getContract)({address:w.relayerForwarderAddress,chain:c.chain,client:c.client}),p=await(0,s.readContract)({contract:y,method:"function getNonce(address) view returns (uint256)",params:[n.address]}),[h,f]=await(async()=>{if(!o.to)throw new Error("engine transactions must have a 'to' address");if(!o.gas)throw new Error("engine transactions must have a 'gas' value");if(!o.data)throw new Error("engine transactions must have a 'data' value");if(w.experimentalChainlessSupport){const t={chainid:BigInt(c.chain.id),data:o.data,from:n.address,gas:o.gas,nonce:p,to:o.to,value:0n};return[await n.signTypedData({domain:{name:"GSNv2 Forwarder",verifyingContract:y.address,version:"0.0.1"},message:t,primaryType:"ForwardRequest",types:{ForwardRequest:l}}),t]}const t={data:o.data,from:n.address,gas:o.gas,nonce:p,to:o.to,value:0n};return[await n.signTypedData({domain:{chainId:c.chain.id,name:w.domainName??"GSNv2 Forwarder",verifyingContract:y.address,version:w.domainVersion??"0.0.1"},message:t,primaryType:"ForwardRequest",types:{ForwardRequest:u}}),t]})();return{message:f,messageType:"forward",signature:h}}const u=[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"gas",type:"uint256"},{name:"nonce",type:"uint256"},{name:"data",type:"bytes"}],l=[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"gas",type:"uint256"},{name:"nonce",type:"uint256"},{name:"data",type:"bytes"},{name:"chainid",type:"uint256"}];async function w(t){const{options:n,queueId:s}=t,c=n.gasless.relayerUrl.split("/relayer/")[0],u=await fetch(`${c}/transaction/status/${s}`,{method:"GET"}),l=await u.json();if(!u.ok)return null;const w=l.result;if(!w)return null;switch(w.status){case"errored":throw new Error(`Transaction errored with reason: ${w.errorMessage}`);case"cancelled":throw new Error("Transaction execution cancelled.");case"mined":return await(0,o.waitForReceipt)({chain:n.transaction.chain,client:n.transaction.client,transactionHash:w.transactionHash});default:return null}}}),2902,[1238,1136,2407,2903]);