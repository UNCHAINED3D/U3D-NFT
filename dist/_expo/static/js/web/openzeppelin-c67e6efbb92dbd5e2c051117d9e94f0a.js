__d((function(g,r,i,a,m,e,d){Object.defineProperty(e,"__esModule",{value:!0}),e.prepareOpenZeppelinTransaction=c,e.relayOpenZeppelinTransaction=async function(t){const{message:o,messageType:p,signature:u}=await c(t),y=await fetch(t.gasless.relayerUrl,{body:(0,s.stringify)({forwarderAddress:t.gasless.relayerForwarderAddress,request:o,signature:u,type:p}),method:"POST"});if(!y.ok)throw new Error(`Failed to send transaction: ${await y.text()}`);const l=await y.json();if(!l.result)throw new Error(`Relay transaction failed: ${l.message}`);const w=JSON.parse(l.result).txHash;if((0,n.isHex)(w))return{chain:t.transaction.chain,client:t.transaction.client,transactionHash:w};throw new Error(`Failed to send transaction: ${(0,s.stringify)(l)}`)};var t=r(d[0]),n=r(d[1]),s=r(d[2]),o=r(d[3]);async function c({account:n,serializableTransaction:s,transaction:c,gasless:y}){const l=(0,t.getContract)({address:y.relayerForwarderAddress,chain:c.chain,client:c.client}),w=await(0,o.readContract)({contract:l,method:"function getNonce(address) view returns (uint256)",params:[n.address]}),[f,h]=await(async()=>{if(!s.to)throw new Error("OpenZeppelin transactions must have a 'to' address");if(!s.gas)throw new Error("OpenZeppelin transactions must have a 'gas' value");if(!s.data)throw new Error("OpenZeppelin transactions must have a 'data' value");if(y.experimentalChainlessSupport){const t={chainid:BigInt(c.chain.id),data:s.data,from:n.address,gas:s.gas,nonce:w,to:s.to,value:0n};return[await n.signTypedData({domain:{name:"GSNv2 Forwarder",verifyingContract:l.address,version:"0.0.1"},message:t,primaryType:"ForwardRequest",types:{ForwardRequest:u}}),t]}const t={data:s.data,from:n.address,gas:s.gas,nonce:w,to:s.to,value:0n};return[await n.signTypedData({domain:{chainId:c.chain.id,name:y.domainName??"GSNv2 Forwarder",verifyingContract:l.address,version:y.domainVersion??"0.0.1"},message:t,primaryType:"ForwardRequest",types:{ForwardRequest:p}}),t]})();return{message:h,messageType:"forward",signature:f}}const p=[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"gas",type:"uint256"},{name:"nonce",type:"uint256"},{name:"data",type:"bytes"}],u=[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"gas",type:"uint256"},{name:"nonce",type:"uint256"},{name:"data",type:"bytes"},{name:"chainid",type:"uint256"}]}),2901,[1238,1224,1136,2407]);